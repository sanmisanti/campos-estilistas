generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// TABLAS DE CAT√ÅLOGO (MAESTRAS)
// ================================

model UserRole {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  permissions Json?
  createdAt   DateTime @default(now()) @map("created_at")

  users User[]

  @@map("user_roles")
}

model ProfessionalSpecialty {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  professionals Professional[]

  @@map("professional_specialties")
}

model ProfessionalStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  color       String?  @db.VarChar(7)
  createdAt   DateTime @default(now()) @map("created_at")

  professionals Professional[]

  @@map("professional_statuses")
}

model ServiceCategory {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar(100)
  description  String?
  icon         String?  @db.VarChar(50)
  displayOrder Int      @default(0) @map("display_order")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  services Service[]

  @@map("service_categories")
}

model ServiceStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  color       String?  @db.VarChar(7)
  createdAt   DateTime @default(now()) @map("created_at")

  services Service[]

  @@map("service_statuses")
}

model WeekDay {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(20)
  shortName String   @map("short_name") @db.VarChar(3)
  dayNumber Int      @unique @map("day_number")
  createdAt DateTime @default(now()) @map("created_at")

  workSchedules WorkSchedule[]

  @@map("week_days")
}

model AppointmentStatus {
  id                 Int      @id @default(autoincrement())
  name               String   @unique @db.VarChar(50)
  description        String?
  color              String?  @db.VarChar(7)
  isFinal            Boolean  @default(false) @map("is_final")
  allowsModification Boolean  @default(true) @map("allows_modification")
  createdAt          DateTime @default(now()) @map("created_at")

  appointments Appointment[]

  @@map("appointment_statuses")
}

model PaymentMethod {
  id               Int      @id @default(autoincrement())
  name             String   @unique @db.VarChar(50)
  description      String?
  isActive         Boolean  @default(true) @map("is_active")
  requiresReference Boolean  @default(false) @map("requires_reference")
  createdAt        DateTime @default(now()) @map("created_at")

  payments Payment[]

  @@map("payment_methods")
}

model PaymentStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  color       String?  @db.VarChar(7)
  isFinal     Boolean  @default(false) @map("is_final")
  createdAt   DateTime @default(now()) @map("created_at")

  payments Payment[]

  @@map("payment_statuses")
}

// ================================
// ENTIDADES PRINCIPALES
// ================================

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(255)
  passwordHash  String    @map("password_hash") @db.VarChar(255)
  roleId        Int?      @map("role_id")
  emailVerified Boolean   @default(false) @map("email_verified")
  isActive      Boolean   @default(true) @map("is_active")
  lastLogin     DateTime? @map("last_login")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  role         UserRole?     @relation(fields: [roleId], references: [id])
  professional Professional?
  auditLogs    AuditLog[]

  @@map("users")
}

model Professional {
  id           Int       @id @default(autoincrement())
  userId       Int?      @unique @map("user_id")
  firstName    String    @map("first_name") @db.VarChar(100)
  lastName     String    @map("last_name") @db.VarChar(100)
  phone        String?   @db.VarChar(20)
  specialtyId  Int?      @map("specialty_id")
  statusId     Int?      @map("status_id")
  baseSalary   Decimal   @default(0) @map("base_salary") @db.Decimal(10, 2)
  hireDate     DateTime? @map("hire_date") @db.Date
  bio          String?
  profileImage String?   @map("profile_image") @db.VarChar(255)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  user                   User?                    @relation(fields: [userId], references: [id])
  specialty              ProfessionalSpecialty?   @relation(fields: [specialtyId], references: [id])
  status                 ProfessionalStatus?      @relation(fields: [statusId], references: [id])
  professionalServices   ProfessionalService[]
  workSchedules          WorkSchedule[]
  appointments           Appointment[]

  @@map("professionals")
}

model Service {
  id                    Int      @id @default(autoincrement())
  name                  String   @db.VarChar(200)
  description           String?
  categoryId            Int?     @map("category_id")
  statusId              Int?     @map("status_id")
  durationMinutes       Int      @map("duration_minutes")
  basePrice             Decimal  @map("base_price") @db.Decimal(10, 2)
  commissionPercentage  Decimal  @default(0) @map("commission_percentage") @db.Decimal(5, 2)
  requiresConsultation  Boolean  @default(false) @map("requires_consultation")
  image                 String?  @db.VarChar(255)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  category             ServiceCategory?      @relation(fields: [categoryId], references: [id])
  status               ServiceStatus?        @relation(fields: [statusId], references: [id])
  professionalServices ProfessionalService[]
  appointments         Appointment[]

  @@map("services")
}

model ProfessionalService {
  id             Int      @id @default(autoincrement())
  professionalId Int      @map("professional_id")
  serviceId      Int      @map("service_id")
  customPrice    Decimal? @map("custom_price") @db.Decimal(10, 2)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([professionalId, serviceId])
  @@map("professional_services")
}

model WorkSchedule {
  id             Int      @id @default(autoincrement())
  professionalId Int      @map("professional_id")
  weekdayId      Int      @map("weekday_id")
  startTime      DateTime @map("start_time") @db.Time
  endTime        DateTime @map("end_time") @db.Time
  breakStart     DateTime? @map("break_start") @db.Time
  breakEnd       DateTime? @map("break_end") @db.Time
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  weekday      WeekDay      @relation(fields: [weekdayId], references: [id])

  @@unique([professionalId, weekdayId])
  @@map("work_schedules")
}

model Client {
  id             Int       @id @default(autoincrement())
  firstName      String    @map("first_name") @db.VarChar(100)
  lastName       String    @map("last_name") @db.VarChar(100)
  email          String?   @db.VarChar(255)
  phone          String?   @db.VarChar(20)
  birthDate      DateTime? @map("birth_date") @db.Date
  gender         String?   @db.VarChar(20)
  documentType   String?   @map("document_type") @db.VarChar(50)
  documentNumber String?   @map("document_number") @db.VarChar(50)
  notes          String?
  preferences    Json?
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  appointments Appointment[]

  @@map("clients")
}

model Appointment {
  id            Int      @id @default(autoincrement())
  clientId      Int      @map("client_id")
  professionalId Int      @map("professional_id")
  serviceId     Int      @map("service_id")
  statusId      Int?     @map("status_id")
  appointmentDate DateTime @map("appointment_date") @db.Date
  startTime     DateTime @map("start_time") @db.Time
  endTime       DateTime @map("end_time") @db.Time
  notes         String?
  internalNotes String?  @map("internal_notes")
  reminderSent  Boolean  @default(false) @map("reminder_sent")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  client       Client             @relation(fields: [clientId], references: [id])
  professional Professional       @relation(fields: [professionalId], references: [id])
  service      Service            @relation(fields: [serviceId], references: [id])
  status       AppointmentStatus? @relation(fields: [statusId], references: [id])
  payments     Payment[]

  @@map("appointments")
}

model Payment {
  id               Int       @id @default(autoincrement())
  appointmentId    Int       @map("appointment_id")
  methodId         Int?      @map("method_id")
  statusId         Int?      @map("status_id")
  amount           Decimal   @db.Decimal(10, 2)
  commissionAmount Decimal   @default(0) @map("commission_amount") @db.Decimal(10, 2)
  discountAmount   Decimal?  @default(0) @map("discount_amount") @db.Decimal(10, 2)
  taxAmount        Decimal?  @default(0) @map("tax_amount") @db.Decimal(10, 2)
  referenceNumber  String?   @map("reference_number") @db.VarChar(100)
  paidAt           DateTime? @map("paid_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  appointment Appointment     @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  method      PaymentMethod?  @relation(fields: [methodId], references: [id])
  status      PaymentStatus?  @relation(fields: [statusId], references: [id])

  @@map("payments")
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(100)
  value       String?
  description String?
  dataType    String   @default("string") @map("data_type") @db.VarChar(20)
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  tableName  String   @map("table_name") @db.VarChar(50)
  recordId   Int      @map("record_id")
  action     String   @db.VarChar(20)
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  createdAt  DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
